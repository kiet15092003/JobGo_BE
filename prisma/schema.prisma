// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  password    String
  name        String
  imageURL    String?
  imgBackURL  String?
  phoneNum    String?

  role        Int           @default(0) // 0 for candidate, 1 for recruiter, 2 for admin
  candidate   Candidate?
  recruiter   Recruiter?
  address     Address?
  experiences Experience[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt() @default(now())
}

model Candidate {
  id           Int               @id @default(autoincrement())
  userId       Int               @unique
  yoe          String?
  bio          String?
  perWeb       String?

  skills       CandidateSkill[]
  user         User             @relation(fields: [userId], references: [id])
  applications Application[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt() @default(now())
}

model Recruiter {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique

  user      User    @relation(fields: [userId], references: [id])
  companyId Int
  company   Company @relation(fields: [companyId], references: [id])
  jobs      Job[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt() @default(now())
}

model Company {
  id          Int           @id @default(autoincrement())
  name        String        @unique()
  description String
  websiteURL  String
  imageURL    String?
  imgBackURL  String?

  recruiters  Recruiter[]
  expriences  Experience[]
  address     Address[]      

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt() @default(now())
}

model Address {
  id       Int     @id @default(autoincrement())
  country  String
  city     String
  district String
  name     String

  userId   Int?     @unique
  user     User?   @relation(fields: [userId], references: [id])

  copmpanyId   Int?     
  copmpany     Company?   @relation(fields: [copmpanyId], references: [id])

  jobs  Job[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt() @default(now())
}


model Job {
  id           Int            @id @default(autoincrement())
  title        String
  description  String
  salary       String
  minYOE       Int

  position     Int            @default(0)  // 0  for fresher, 1 for junior, 2 for senior 
  jobType      Int            @default(0)  // 0  for onsite, 1 for remote, 2 for hyprid
  timeType     Int            @default(1)  // 0 for parttime, 1 for fulltime

  addressId    Int
  address      Address        @relation(fields: [addressId], references: [id])

  skills       JobSkill[]
  applications Application[]
  recruiterId  Int
  recruiter    Recruiter      @relation(fields: [recruiterId], references: [id])

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt() @default(now())
}

model Application {
  id          Int                @id @default(autoincrement())

  jobId       Int
  job         Job               @relation(fields: [jobId], references: [id])
  candidateId Int
  candidate   Candidate         @relation(fields: [candidateId], references: [id])
  status      Int               @default(0) // 0  for pending, 1 for accpeted, 2 for rejected

  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt() @default(now())
}

model Skill {
  id         Int               @id @default(autoincrement())
  name       String            @unique

  jobs       JobSkill[]
  candidates CandidateSkill[]

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt() @default(now())
}

model Experience {
  id          Int        @id @default(autoincrement())
  title       String
  startDate   DateTime
  endDate     DateTime?
  description String

  userId      Int
  user        User      @relation(fields: [userId], references: [id])

  companyId   Int
  company     Company   @relation(fields: [companyId], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt() @default(now())
}

model JobSkill {
  jobId   Int
  skillId Int
  job     Job   @relation(fields: [jobId], references: [id])
  skill   Skill @relation(fields: [skillId], references: [id])
  @@id([jobId, skillId])
}

model CandidateSkill {
  candidateId Int
  skillId     Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  skill       Skill     @relation(fields: [skillId], references: [id])
  @@id([candidateId, skillId])
}